name: Deploy to Compute Engine & Cloud Composer

on:
  push:
    branches: testing-pipeline
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Where to deploy Airflow'
        required: true
        default: 'compute_engine'
        type: choice 
        options:
          - local
          - cloud_composer
          - compute_engine
          - both

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Data_Pipeline/requirements-test.txt

      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=$(pwd)/Data_Pipeline:$(pwd)" >> $GITHUB_ENV
          echo "PYTHONPATH set to $(pwd)/Data_Pipeline:$(pwd)"

      - name: Run Unit Tests
        run: |
          python -m unittest discover -s Data_Pipeline/tests -p "test*.py"

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # ‚úÖ Deploy to Compute Engine Only if Selected or Defaulting to Compute Engine
      - name: Deploy to Compute Engine
        if: ${{ github.event_name == 'push' || inputs.deployment_target == 'compute_engine' || inputs.deployment_target == 'both' }}
        run: |
          echo "üöÄ Starting Compute Engine Deployment..."

          # ‚úÖ Ensure SSH Key Exists
          if [ ! -f ~/.ssh/github-actions-key ]; then
            ssh-keygen -t rsa -b 4096 -C "github-actions" -N "" -f ~/.ssh/github-actions-key
            echo "‚úÖ SSH Key generated!"
          else
            echo "‚úÖ SSH Key already exists!"
          fi

          # ‚úÖ Ensure SSH Key is Added to Compute Engine
          PUBLIC_KEY=$(cat ~/.ssh/github-actions-key.pub)
          EXISTING_KEYS=$(gcloud compute instances describe airflow-server --zone us-central1-a --format="value(metadata.ssh-keys)" || echo "")
          if [[ "$EXISTING_KEYS" != *"$PUBLIC_KEY"* ]]; then
            gcloud compute instances add-metadata airflow-server --zone us-central1-a --metadata=ssh-keys="${{ secrets.COMPUTE_ENGINE_USER }}:$PUBLIC_KEY"
            echo "‚úÖ SSH Key added to Compute Engine!"
          else
            echo "‚úÖ SSH Key already exists in Compute Engine!"
          fi

          # ‚úÖ Ensure Compute Engine is Running
          INSTANCE_STATUS=$(gcloud compute instances describe airflow-server --zone us-central1-a --format="value(status)" || echo "STOPPED")
          if [[ "$INSTANCE_STATUS" != "RUNNING" ]]; then
            echo "üöÄ Starting Compute Engine instance..."
            gcloud compute instances start airflow-server --zone us-central1-a
            echo "‚úÖ Compute Engine started."
          else
            echo "‚úÖ Compute Engine is already running."
          fi

          # ‚úÖ Prepare Airflow Directory on Compute Engine
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github-actions-key ${{ secrets.COMPUTE_ENGINE_USER }}@${{ secrets.COMPUTE_ENGINE_IP }} << 'EOF'
            echo "üöÄ Preparing Airflow directory on Compute Engine..."
            sudo mkdir -p ~/airflow
            sudo chown -R $USER:$USER ~/airflow
            sudo chmod -R 777 ~/airflow
            echo "‚úÖ Airflow directory ready!"
          EOF

          # ‚úÖ Copy Project Files to Compute Engine
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/github-actions-key" --exclude '.git' . ${{ secrets.COMPUTE_ENGINE_USER }}@${{ secrets.COMPUTE_ENGINE_IP }}:~/airflow

          # ‚úÖ Deploy Airflow on Compute Engine
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github-actions-key ${{ secrets.COMPUTE_ENGINE_USER }}@${{ secrets.COMPUTE_ENGINE_IP }} << 'EOF'
            echo "üöÄ Checking if Docker is installed..."
            if ! command -v docker &> /dev/null; then
              echo "‚ö†Ô∏è Docker not found. Installing..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              echo "‚úÖ Docker installed!"
            else
              echo "‚úÖ Docker is already installed."
            fi

            echo "üöÄ Checking if Docker Compose is installed..."
            if ! command -v docker-compose &> /dev/null; then
              echo "‚ö†Ô∏è Docker Compose not found. Installing..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              echo "‚úÖ Docker Compose installed!"
            else
              echo "‚úÖ Docker Compose is already installed."
            fi

            echo "üöÄ Starting Airflow with Docker Compose..."
            cd ~/airflow
            sudo docker compose down
            sudo docker compose up -d
            echo "‚úÖ Airflow successfully started!"
          EOF

      # ‚úÖ Deploy to Cloud Composer Only if Selected
      - name: Deploy DAGs to Cloud Composer
        if: ${{ inputs.deployment_target == 'cloud_composer' || inputs.deployment_target == 'both' }}
        run: |
          echo "üöÄ Uploading DAGs to Cloud Composer..."
          gcloud storage cp -r Data_Pipeline/dags gs://your-cloud-composer-bucket/dags
          echo "‚úÖ DAGs uploaded successfully!"

      # ‚úÖ Remove SSH Key after deployment (Security)
      - name: Remove SSH Key
        run: rm -f ~/.ssh/github-actions-key ~/.ssh/github-actions-key.pub
