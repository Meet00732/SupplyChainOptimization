name: Deploy to Compute Engine & Cloud Composer

on:
  push:
    branches: testing-pipeline
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Where to deploy Airflow'
        required: true
        default: 'compute_engine'
        type: choice 
        options:
          - local
          - cloud_composer
          - compute_engine
          - both

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Data_Pipeline/requirements-test.txt

      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=$(pwd)/Data_Pipeline:$(pwd)" >> $GITHUB_ENV
          echo "PYTHONPATH set to $(pwd)/Data_Pipeline:$(pwd)"

      - name: Run Unit Tests
        run: |
          python -m unittest discover -s Data_Pipeline/tests -p "test*.py"

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # âœ… Deploy to Compute Engine Only if Selected or Defaulting to Compute Engine
      - name: Deploy to Compute Engine
        if: ${{ github.event_name == 'push' || inputs.deployment_target == 'compute_engine' || inputs.deployment_target == 'both' }}
        run: |
          echo "ðŸš€ Starting Compute Engine Deployment..."

          # âœ… Generate SSH Key (Only If Not Exists)
          if [ ! -f ~/.ssh/github-actions-key ]; then
            ssh-keygen -t rsa -b 4096 -C "github-actions" -N "" -f ~/.ssh/github-actions-key
            echo "âœ… SSH Key generated!"
          else
            echo "âœ… SSH Key already exists!"
          fi

          # âœ… Add SSH Key to Compute Engine (Only If Not Exists)
          PUBLIC_KEY=$(cat ~/.ssh/github-actions-key.pub)
          EXISTING_KEYS=$(gcloud compute instances describe airflow-server --zone us-central1-a --format="value(metadata.ssh-keys)")
          if [[ "$EXISTING_KEYS" != *"$PUBLIC_KEY"* ]]; then
            gcloud compute instances add-metadata airflow-server --zone us-central1-a --metadata=ssh-keys="${{ secrets.COMPUTE_ENGINE_USER }}:$PUBLIC_KEY"
            echo "âœ… SSH Key added to Compute Engine!"
          else
            echo "âœ… SSH Key already exists in Compute Engine!"
          fi

          # âœ… Ensure Compute Engine is Running
          INSTANCE_STATUS=$(gcloud compute instances describe airflow-server --zone us-central1-a --format="value(status)")
          if [[ "$INSTANCE_STATUS" != "RUNNING" ]]; then
            echo "ðŸš€ Starting Compute Engine instance..."
            gcloud compute instances start airflow-server --zone us-central1-a
            echo "âœ… Compute Engine started."
          else
            echo "âœ… Compute Engine is already running."
          fi

          # âœ… Copy Project Files to Compute Engine
          scp -o StrictHostKeyChecking=no -i ~/.ssh/github-actions-key -r . ${{ secrets.COMPUTE_ENGINE_USER }}@${{ secrets.COMPUTE_ENGINE_IP }}:~/airflow

          # âœ… Deploy Airflow on Compute Engine
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github-actions-key ${{ secrets.COMPUTE_ENGINE_USER }}@${{ secrets.COMPUTE_ENGINE_IP }} << 'EOF'
            cd ~/airflow
            sudo docker compose down
            sudo docker compose up -d
            echo "âœ… Airflow successfully started!"
          EOF

      # âœ… Deploy to Cloud Composer Only if Selected
      - name: Deploy DAGs to Cloud Composer
        if: ${{ inputs.deployment_target == 'cloud_composer' || inputs.deployment_target == 'both' }}
        run: |
          echo "ðŸš€ Uploading DAGs to Cloud Composer..."
          gcloud storage cp -r Data_Pipeline/dags gs://your-cloud-composer-bucket/dags
          echo "âœ… DAGs uploaded successfully!"

      # âœ… Remove SSH Key after deployment (Security)
      - name: Remove SSH Key
        run: rm -f ~/.ssh/github-actions-key ~/.ssh/github-actions-key.pub
