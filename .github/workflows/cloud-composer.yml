name: Deploy to Compute Engine & Cloud Composer

on:
  push:
    branches: testing-pipeline
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Where to deploy Airflow'
        required: true
        default: 'compute_engine'
        type: choice 
        options:
          - local
          - cloud_composer
          - compute_engine
          - both

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Data_Pipeline/requirements-test.txt

      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=$(pwd)/Data_Pipeline:$(pwd)" >> $GITHUB_ENV
          echo "PYTHONPATH set to $(pwd)/Data_Pipeline:$(pwd)"

      - name: Run Unit Tests
        run: |
          python -m unittest discover -s Data_Pipeline/tests -p "test*.py"

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # âœ… Deploy to Compute Engine Only if Selected or Defaulting to Compute Engine
      - name: Deploy to Compute Engine
        if: ${{ github.event_name == 'push' || inputs.deployment_target == 'compute_engine' || inputs.deployment_target == 'both' }}
        run: |
          echo "ðŸš€ Starting Compute Engine Deployment..."

          # âœ… Ensure SSH Key Exists
          if [ ! -f ~/.ssh/github-actions-key ]; then
            ssh-keygen -t rsa -b 4096 -C "github-actions" -N "" -f ~/.ssh/github-actions-key
            echo "âœ… SSH Key generated!"
          else
            echo "âœ… SSH Key already exists!"
          fi

          # âœ… Ensure SSH Key is Added to Compute Engine
          PUBLIC_KEY=$(cat ~/.ssh/github-actions-key.pub)
          EXISTING_KEYS=$(gcloud compute instances describe airflow-server --zone us-central1-a --format="value(metadata.ssh-keys)" || echo "")
          if [[ "$EXISTING_KEYS" != *"$PUBLIC_KEY"* ]]; then
            gcloud compute instances add-metadata airflow-server --zone us-central1-a --metadata=ssh-keys="${{ secrets.COMPUTE_ENGINE_USER }}:$PUBLIC_KEY"
            echo "âœ… SSH Key added to Compute Engine!"
          else
            echo "âœ… SSH Key already exists in Compute Engine!"
          fi

          # âœ… Ensure Compute Engine is Running
          INSTANCE_STATUS=$(gcloud compute instances describe airflow-server --zone us-central1-a --format="value(status)" || echo "STOPPED")
          if [[ "$INSTANCE_STATUS" != "RUNNING" ]]; then
            echo "ðŸš€ Starting Compute Engine instance..."
            gcloud compute instances start airflow-server --zone us-central1-a
            echo "âœ… Compute Engine started."
          else
            echo "âœ… Compute Engine is already running."
          fi

          # âœ… Prepare Airflow Directory on Compute Engine
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github-actions-key ${{ secrets.COMPUTE_ENGINE_USER }}@${{ secrets.COMPUTE_ENGINE_IP }} << 'EOF'
            echo "ðŸš€ Preparing Airflow directory on Compute Engine..."
            sudo mkdir -p ~/airflow
            sudo chown -R $USER:$USER ~/airflow
            sudo chmod -R 777 ~/airflow
            echo "âœ… Airflow directory ready!"
          EOF

          # âœ… Copy Project Files to Compute Engine
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/github-actions-key" --exclude '.git' . ${{ secrets.COMPUTE_ENGINE_USER }}@${{ secrets.COMPUTE_ENGINE_IP }}:~/airflow

      - name: Deploy Airflow on Compute Engine
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github-actions-key ${{ secrets.COMPUTE_ENGINE_USER }}@${{ secrets.COMPUTE_ENGINE_IP }} << 'EOF'
            echo "ðŸš€ Updating and Installing Docker..."
            sudo apt-get update -y
            sudo apt-get remove docker docker-engine docker.io containerd runc -y
            sudo apt-get install -y ca-certificates curl gnupg

            echo "ðŸ”„ Adding Docker's GPG key and repository..."
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
            sudo chmod a+r /etc/apt/keyrings/docker.asc
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update -y

            echo "âœ… Installing Docker..."
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

            echo "ðŸš€ Installing Docker Compose (latest version)..."
            DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')
            sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

            echo "âœ… Verifying Installation..."
            docker --version
            docker compose version
            docker-compose --version

            echo "ðŸš€ Starting Airflow with Docker Compose..."
            cd ~/airflow
            docker compose down
            docker compose up -d postgres redis
            # Wait for postgres and redis to be healthy
            echo "Waiting for postgres and redis to be healthy..."
            sleep 30
            
            # Run airflow-init separately with more detailed output
            docker compose up --no-start airflow-init
            docker compose start airflow-init
            docker compose logs airflow-init
            echo "âœ… Airflow successfully started!"
          EOF



      # âœ… Deploy to Cloud Composer Only if Selected
      - name: Deploy DAGs to Cloud Composer
        if: ${{ inputs.deployment_target == 'cloud_composer' || inputs.deployment_target == 'both' }}
        run: |
          echo "ðŸš€ Uploading DAGs to Cloud Composer..."
          gcloud storage cp -r Data_Pipeline/dags gs://your-cloud-composer-bucket/dags
          echo "âœ… DAGs uploaded successfully!"

      # âœ… Remove SSH Key after deployment (Security)
      - name: Remove SSH Key
        run: rm -f ~/.ssh/github-actions-key ~/.ssh/github-actions-key.pub
