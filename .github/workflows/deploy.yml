name: Data-Pipeline

on:
  push:
    branches:
      - testing-pipeline

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Data_Pipeline/requirements-test.txt

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/Data_Pipeline" >> $GITHUB_ENV

      - name: Install Coverage
        run: pip install coverage

      - name: Run Unit Tests with Coverage
        run: |
          coverage run -m unittest discover -s Data_Pipeline/tests -p "test*.py"
          coverage report

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Verify .env Exists
        run: |
          if [ -f .env ]; then
            echo "✅ .env file exists!"
            cat .env
          else
            echo "❌ .env file is missing!"
            exit 1
          fi

      - name: Load Environment Variables from .env
        run: |
          set -a
          source .env || true
          set +a
          env | grep "AIRFLOW\|POSTGRES\|REDIS"
        shell: bash

      - name: Inject GCP Key into .env
        run: |
          mkdir -p secret  # Ensure the directory exists
          echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" > secret/gcp-key.json
          chmod 600 secret/gcp-key.json  # Fix permissions
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/secret/gcp-key.json" >> $GITHUB_ENV
          # Verify key content (safely)
          if [ -s secret/gcp-key.json ]; then
            echo "✅ GCP Key has content"
            # Print first few characters to verify it's a JSON (without revealing sensitive data)
            head -c 20 secret/gcp-key.json | grep -q "{" && echo "✅ GCP Key appears to be valid JSON" || echo "❌ GCP Key does not appear to be valid JSON"
          else
            echo "❌ GCP Key file is empty!"
            exit 1
          fi

      - name: Verify GCP Key
        run: |
          if [ -f "secret/gcp-key.json" ]; then
            echo "✅ GCP Key exists!"
            # Check file size
            stat -c "File size: %s bytes" secret/gcp-key.json
          else
            echo "❌ GCP Key is missing!" && exit 1
          fi

      - name: Remove Existing Airflow Init Container
        run: docker compose rm -f airflow-init || true

      - name: Start Docker Compose
        run: docker compose up -d --build

      - name: Debug Airflow Logs
        run: |
          echo "Waiting for airflow-init to complete..."
          sleep 30  # Give some time for logs to be generated
          echo "=== AIRFLOW INIT LOGS ==="
          docker compose logs airflow-init
          echo "=== CONTAINER INSPECTION ==="
          docker inspect airflow-init --format='{{.State.ExitCode}}: {{.State.Error}}'
          echo "=== CHECKING GCP KEY IN CONTAINER ==="
          docker compose exec -T data-pipeline-container ls -la /app/secret/ || true
          docker compose exec -T data-pipeline-container stat /app/secret/gcp-key.json || true

      - name: Verify Containers are Running
        run: docker ps -a